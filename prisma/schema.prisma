generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int          @id @default(autoincrement()) @map("user_id")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  userName     String       @unique @map("user_name")
  userPassword String       @map("user_password")
  email        String?
  vertualRuns  VirtualRun[]

  @@map("user")
}

model Product {
  productId   Int           @id @default(autoincrement()) @map("product_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  name        String
  productOpts ProductOpt[]
  productPics ProductPic[]
  OrderDetail OrderDetail[]

  @@index([productId])
  @@map("product")
}

model ProductOpt {
  productOptId Int           @id @default(autoincrement()) @map("product_opt_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  productId    Int           @map("product_id")
  product      Product       @relation(fields: [productId], references: [productId], onDelete: Cascade)
  optName      String        @map("opt_name")
  price        Float?
  OrderDetail  OrderDetail[]

  @@map("product_opt")
}

model ProductPic {
  productPicId Int      @id @default(autoincrement()) @map("product_pic_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  productId    Int      @map("product_id")
  product      Product  @relation(fields: [productId], references: [productId], onDelete: Cascade)
  rank         Int
  url          String

  @@map("product_pic")
}

model Order {
  orderId          Int      @id @default(autoincrement()) @map("order_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  name             String
  email            String
  phone            String
  address          String
  remark           String?
  statusId         Int      @default(1)
  status           Status   @relation(fields: [statusId], references: [statusId])
  totalAmt         Float    @map("total_amt")
  deliveryCost     Float    @map("delivery_cost")
  grandTotalAmt    Float    @map("grand_total_amt")
  payQrUrl         String?  @map("pay_qr_url")
  userUploadPicUrl String?  @map("user_upload_pic_url")
  isImportant      Boolean  @default(false) @map("is_important")
  emsTracking      String?  @map("ems_tracking")
  discountCode     String?  @map("discount_code")
  discountAmt      Float?   @map("discount_amt")

  orderDetails OrderDetail[]
  notes        Note[]
  adminPhotos  AdminPhoto[]

  @@index([orderId])
  @@map("order")
}

model OrderDetail {
  orderDetailId Int      @id @default(autoincrement()) @map("order_detail_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  orderId Int   @map("order_id")
  order   Order @relation(fields: [orderId], references: [orderId], onDelete: Cascade)

  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [productId])

  productOptId Int        @map("product_opt_id")
  productOpt   ProductOpt @relation(fields: [productOptId], references: [productOptId])

  unit  Int
  price Float

  @@map("order_detail")
}

model Status {
  statusId Int     @id @default(autoincrement()) @map("status_id")
  name     String  @unique
  orders   Order[]

  @@map("status")
}

model Note {
  noteId    Int      @id @default(autoincrement()) @map("note_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  noteTxt   String   @map("note_txt")
  orderId   Int      @map("order_id")
  order     Order    @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  isRobot   Boolean  @default(false) @map("is_robot")

  @@map("note")
}

model AdminPhoto {
  adminPhotoId Int      @id @default(autoincrement()) @map("note_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  orderId      Int      @map("order_id")
  order        Order    @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  picUrl       String   @map("pic_url")

  @@map("admin_photo")
}

model Coupon {
  couponId       Int      @id @default(autoincrement()) @map("coupon_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  discountCode   String   @map("discount_code")
  discountType   Int      @map("discount_type")
  discountAmt    Float    @map("discount_amt")
  maxDiscountAmt Float    @map("max_discount_amt")
  isActive       Boolean  @default(false) @map("is_active")

  @@map("coupon")
}

model VirtualRun {
  virtualRunId      Int              @id @default(autoincrement()) @map("virtual_run_id")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  userId            Int
  user              User             @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userUploadPicUrl  String
  aiDate            DateTime?
  aiDistance        Float?
  aiTotalTime       String? // Prisma has no Time type; use String or Int (seconds)
  confirmedDate     DateTime?
  confirmedDistance Float?
  confirmedTime     String? // Same as above
  status            VirtualRunStatus @default(uploaded)

  @@map("virtual_run")
}

enum VirtualRunStatus {
  uploaded
  confirm
  declined
}

model Test {
  testId Int    @id @default(autoincrement()) @map("test_id")
  test   String

  @@map("test")
}
